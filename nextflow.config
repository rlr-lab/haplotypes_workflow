// General parameters
params {
    barcodes        = "barcodes.txt"
    fastq_dir       = ""
    regions_bed     = "${workflow.projectDir}/ReferenceSequences/SIVregions_wBarcode.bed"
    reference       = "${workflow.projectDir}/ReferenceSequences/SIVMac239FullGenome_wBarcode.fas"
    outdir          = "${workflow.projectDir}/nf-results"
    virus           = "SIV"
    min_read_length = -1
    max_read_length = -1
    count_barcodes  = false
    gpu             = false
    rvhaplo         = false
}

workDir = { work_dir == '' ? 'work' : secrets.WORK }

cleanup = true

executor {
    name = 'slurm'
    submitRateLimit = '10sec'
    queueSize = 50
}

conda {
    enabled  = true
    useMamba = true
}

process {
    shell         = ['/bin/bash', '-eu']
    // memory errors should be retried. otherwise error out
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 2
    maxErrors     = '-1'
    conda         = "${workflow.projectDir}/conda/medaka.yaml"
    withName:concatenateFastq {
        executor        = 'local'
        errorStrategy   = 'retry'
    }
    withName:qualityFilter {
        executor        = 'slurm'
        clusterOptions  = '-A b1042'
        queue           = 'genomics'
        cpus            = 1
        time            = { 120.minute * task.attempt}
        memory          = { 4.GB * task.attempt}
    }
    withName:flyeAssembly {
        executor        = 'slurm'
        clusterOptions  = '-A b1042'
        queue           = 'genomics'
        cpus            = 2
        time            = { 20.minute * task.attempt}
        memory          = { 8.GB * task.attempt} 
    }
    withName:cleanContigs {
        executor        = 'slurm'
        clusterOptions  = '-A b1042'
        queue           = 'genomics'
        cpus            = 1
        time            = { 5.minute * task.attempt}
        memory          = { 8.GB * task.attempt}
    }
    withName:polishAssembly {
        executor        = 'slurm'
        clusterOptions  = { params.gpu ? '-A b1042 --gres=gpu:a100:1' : '-A b1042' }
        queue           = { params.gpu ? 'genomics-gpu' : 'genomics' }
        cpus            = 1
        time            = { 30.minute * task.attempt}
        memory          = { 16.GB * task.attempt}
    }
    withName:alignReads {
        executor        = 'slurm'
        clusterOptions  = '-A b1042'
        queue           = 'genomics'
        cpus            = 2
        time            = { 10.minute * task.attempt}
        memory          = { 16.GB * task.attempt}
    }
    withName:trimConsensus {
        executor        = 'slurm'
        clusterOptions  = '-A b1042'
        queue           = 'genomics'
        cpus            = 1
        time            = { 5.minute * task.attempt}
        memory          = { 8.GB * task.attempt}
    }
    withName:haplotypes {
        executor        = 'slurm'
        clusterOptions  = '-A b1042'
        queue           = 'genomics'
        cpus            = 2
        time            = { 10.minute * task.attempt}
        memory          = { 16.GB * task.attempt}
    }
    withName:countBarcodes {
        executor        = 'slurm'
        clusterOptions  = '-A b1042'
        queue           = 'genomics'
        cpus            = 2
        time            = { 8.minute * task.attempt}
        memory          = { 8.GB * task.attempt}
    }
    withName:RVHaplo {
        executor        = 'slurm'
        clusterOptions  = { params.gpu ? '-A b1042 --gres=gpu:a100:1' : '-A b1042' }
        queue           = { params.gpu ? 'genomics-gpu' : 'genomics' }
        cpus            = 2
        time            = { 120.minute * task.attempt}
        memory          = { 32.GB * task.attempt}
    }
}

report {
    enabled = true
}

manifest {
    name            = 'Haplotypes workflow'
    description     = ''
    mainScript      = 'main.nf'
    nextflowVersion = '>=24.04.4'
    contributors    = [
        [
            name: 'Seth Borrowman',
            affiliation: 'Northwestern University',
            github: 'https://github.com/seth-borrowman'
        ]
    ]
}
